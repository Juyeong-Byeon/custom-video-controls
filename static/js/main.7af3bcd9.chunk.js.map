{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","currentTime","setcurrnetTime","maxTime","setMaxTime","isPlaying","setIsplaying","videoRef","createRef","onClickSkipButtons","e","currentTarget","name","current","ref","width","src","id","onTimeUpdate","onLoadedData","duration","loop","autoPlay","playsInline","type","onInput","Number","value","defaultValue","max","onClick","pause","play","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LA+DeA,MA5Df,WAEE,IAFa,EAIyBC,mBAAS,GAJlC,mBAINC,EAJM,KAIOC,EAJP,OAKcF,mBAAS,GALvB,mBAKNG,EALM,KAKEC,EALF,OAMkBJ,oBAAS,GAN3B,mBAMNK,EANM,KAMIC,EANJ,KAOPC,EAAWC,sBAmBXC,EAAmB,SAACC,GAGxB,OAAQA,EAAEC,cAAcC,MACtB,IAAK,WACAL,EAASM,UACZN,EAASM,QAAQZ,aAAa,GAC9B,MACF,IAAK,UACAM,EAASM,UACZN,EAASM,QAAQZ,aAAa,KAQpC,OACE,gCACE,iCACE,gDAEF,oCACE,uBAAOa,IAAKP,EAAUQ,MAAM,OAAOC,IAAI,mEAAmEC,GAAG,YAAYC,aAxC3G,SAACR,GACnBR,EAAeQ,EAAEC,cAAcV,cAuC2HkB,aAhC7I,SAACT,GACdN,EAAWM,EAAEC,cAAcS,WA+BwJC,MAAI,EAACC,UAAU,EAAOC,aAAW,IAChN,uBAAOC,KAAK,QAAQC,QA9BZ,SAACf,GACbR,EAAewB,OAAOhB,EAAEC,cAAcgB,QACnCpB,EAASM,UACZN,EAASM,QAAQZ,YAAYA,IA2Bc0B,MAAO1B,EAAa2B,aAAc,EAAIC,IAAK1B,IAClF,wBAAQS,KAAK,WAAWkB,QAASrB,EAAjC,uBACA,wBAAQqB,QAxCU,SAACpB,GAAsD,IAAD,IAE5EL,EAAS,UAACE,EAASM,eAAV,OAAC,EAAkBkB,QAAnB,UAA2BxB,EAASM,eAApC,OAA2B,EAAkBmB,OACtD1B,GAAcD,IAqCV,SAAqCA,EAAU,QAAQ,UACvD,wBAAQO,KAAK,UAAUkB,QAASrB,EAAhC,8BC3COwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7af3bcd9.chunk.js","sourcesContent":["import React, { createRef, useState } from 'react';\nimport logo from './logo.svg';\n\nfunction App() {\n\n  const videoControl=()=>{\n  }\n  const [currentTime, setcurrnetTime] = useState(0);\n  const [maxTime,setMaxTime]=useState(0);\n  const [isPlaying,setIsplaying]=useState(false);\n  const videoRef = createRef<HTMLVideoElement>();\n\n\n  const updateTimeBar=(e:React.SyntheticEvent<HTMLVideoElement, Event>)=>{\n    setcurrnetTime(e.currentTarget.currentTime);\n  }\n  const onClickPlayButton=(e: React.MouseEvent<HTMLButtonElement, MouseEvent>)=>{\n\n    isPlaying?videoRef.current?.pause():videoRef.current?.play();\n    setIsplaying(!isPlaying);\n  }\n  const onLoaded=(e:React.SyntheticEvent<HTMLVideoElement, Event>)=>{\n    setMaxTime(e.currentTarget.duration);\n  }\n  const onInput=(e:React.FormEvent<HTMLInputElement>)=>{\n    setcurrnetTime(Number(e.currentTarget.value));\n    if(videoRef.current)\n    videoRef.current.currentTime=currentTime;\n  }\n  const onClickSkipButtons=(e:React.MouseEvent<HTMLButtonElement, MouseEvent>)=>{\n    \n   \n    switch (e.currentTarget.name) {\n      case \"backward\":\n        if(videoRef.current)\n        videoRef.current.currentTime-=5;\n        break;\n      case \"forward\":\n        if(videoRef.current)\n        videoRef.current.currentTime+=5;\n          break;\n      default:\n        break;\n    }\n  \n  }\n\n  return (\n    <div>\n      <header>\n        <h1>video player</h1>\n      </header>\n      <section>\n        <video ref={videoRef} width=\"1000\" src=\"https://video-public.canva.com/VADbyUViLz0/videos/33cbbd0bc0.mp4\" id='video_tag' onTimeUpdate={updateTimeBar} onLoadedData={onLoaded}  loop autoPlay={true}  playsInline/>\n        <input type='range' onInput={onInput}  value={currentTime} defaultValue={0}  max={maxTime} />\n        <button name=\"backward\" onClick={onClickSkipButtons}>back 5sec</button>\n        <button onClick={onClickPlayButton}>{isPlaying?\"pause\":\"start\"}</button>\n        <button name=\"forward\" onClick={onClickSkipButtons}>skip 5sec</button>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}